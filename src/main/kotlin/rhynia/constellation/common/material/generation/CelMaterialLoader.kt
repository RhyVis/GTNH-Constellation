package rhynia.constellation.common.material.generation

import gregtech.api.enums.FluidState
import gregtech.api.enums.OrePrefixes
import gregtech.api.fluid.GTFluidFactory
import net.minecraftforge.fluids.Fluid
import net.minecraftforge.fluids.FluidRegistry
import rhynia.constellation.Log
import rhynia.constellation.api.interfaces.Loader
import rhynia.constellation.common.item.container.CelGeneratedMetaItem

object CelMaterialLoader : Loader {
  override fun load() {
    Log.info("Registering materials...")
    val time1 = System.currentTimeMillis()
    materialSet.forEach {
      Log.debug("Loading material: ${it.id}: ${it.internalName}")
      generateFluid(it)
      materialMap[it.id] = it
    }
    generateMetaItem()
    Log.info("Generated ${materialMap.size} materials in ${System.currentTimeMillis() - time1}ms")
  }

  val materialSet = mutableSetOf<CelMaterial>()
  val materialMap = mutableMapOf<Short, CelMaterial>()
  val itemMap = mutableMapOf<OrePrefixes, CelGeneratedMetaItem>()
  val fluidMap = mutableMapOf<CelMaterial, MutableMap<FluidState, Fluid>>()

  private fun generateFluid(material: CelMaterial) {
    if (!material.flagFluid) return
    material.fluidStateMap.forEach { (state, info) ->
      val (name, temperature) = info
      var fluid: Fluid
      if (FluidRegistry.isFluidRegistered(name)) {
        Log.warn("Fluid $name is already registered!")
        fluid = FluidRegistry.getFluid(name)
      } else {
        GTFluidFactory.builder(name)
            .withLocalizedName(material.displayName)
            .withStateAndTemperature(state, temperature)
            .withTextureName("autogenerated")
            .withColorRGBA(material.color)
            .buildAndRegister()
            .asFluid()
            .let { fluid = it }
        Log.debug("Generated fluid $name")
      }
      fluidMap[material]?.let { it[state] = fluid }
          ?: run { fluidMap[material] = mutableMapOf(state to fluid) }
    }
  }

  private fun getUsedOrePrefixes(): Set<OrePrefixes> {
    materialSet
        .flatMap { it.getFinalOrePrefixes() }
        .toSortedSet(compareBy { it.ordinal })
        .let {
          Log.debug("Used ore prefixes: ${it.joinToString(", ") { it.name }}")
          return it
        }
  }

  private fun generateMetaItem() {
    getUsedOrePrefixes().forEach {
      itemMap.getOrPut(it) { CelGeneratedMetaItem(it) }
      Log.debug("Generated item for ${it.name}")
    }
  }
}
